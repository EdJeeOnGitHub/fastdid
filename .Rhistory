rm(treatdata)
rm(controldata)
gc()
eventdata[,post:=event_time >= 0]
#turn the cols into factors
factor_cols <- c("id", "treatgroup", "cohort", "event_time", "time_pair", "time")
eventdata[, (factor_cols) := lapply(.SD, as.factor), .SDcols = factor_cols]
basefactor<-unique(eventdata[event_time==base_time,event_time])
basefactor<-basefactor[length(basefactor)]
eventdata[,event_time:=relevel(event_time,ref=as.character(basefactor))]
#calculating weights so that controls match treated households on characteristics
#Note: this may have a lot of fixed effects, and may need to be broken down into
#multiple smaller regressions:
call <- ifelse(!is.character(covariate_base_balance_linear),
"treated ~ 1 | interaction(cohort,event_time,time_pair,stratify,balancevars, drop = TRUE)",
paste0("treated ~",paste0(covariate_base_balance_linear,collapse="+",
sep=":interaction(cohort,event_time,time_pair,stratify,balancevars_linear_subset, drop = TRUE)"),
"| interaction(cohort,event_time,time_pair,stratify,balancevars, drop = TRUE)"))
eventdata[,pval:= feols(as.formula(call), data = eventdata, lean = FALSE)$fitted.values]
eventdata <- eventdata[pval < 1 & pval > 0]
eventdata[,pweight := ifelse(treated == 1, 1, pval/(1-pval))]
eventdata[,pval:=NULL]
#  deal with extensions ----------------------------------------------
if(!is.na(instrument)){
eventdata <- eventdata |> process_iv(instrument, instrument_exposure, covs_instrument_base_balance, saturate)
}
if(!is.na(stratify_balance_val)){
eventdata <- eventdata |> process_stratify()
}
eventdata[,treated:=as.factor(treated)]
return(eventdata)
}
construct_event_variables<-function(eventdata,saturate=FALSE,IV=FALSE,response=NULL){
#These regressions should work identically if the fixed effects (after the "|") were replaced with:
# interaction(time_pair,id,cohort)
eventdata[,treated_post := as.factor((treated == 1) * (post == 1))]
eventdata[,treated_pre := as.factor((treated == 1) * (post == 0))]
eventdata[,treated_event_time := event_time]
eventdata[treated==0,treated_event_time := 1] #1 is the base level
eventdata[,event_time_stratify:=interaction(event_time,stratify, drop = TRUE)]
eventdata[,treated_post_stratify := interaction(treated_post,stratify, drop = TRUE)]
eventdata[,treated_pre_stratify := interaction(treated_pre,stratify,drop=TRUE)]
eventdata[treated_pre==0,treated_pre_stratify := 1]
eventdata[event_time==base_time,treated_pre_stratify := 1]
if(IV==FALSE) eventdata[,unitfe := interaction(time_pair,treated,stratify, drop = TRUE)]
else eventdata[,unitfe := interaction(time_pair,id,treated,cohort,stratify, drop = TRUE)]
eventdata[,treated_event_time_stratify := interaction(event_time,stratify, drop = TRUE)]
#Omitting base year for all levels of --stratify--:
eventdata[event_time==base_time,event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[treated == 0 ,treated_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
eventdata[event_time==base_time,treated_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
#Omitting effect for untreated people or observations in pre-period:
eventdata[treated_post == 0 ,treated_post_stratify := paste0(c(0,1),collapse=".")]
eventdata[,treated_post_stratify:=relevel(treated_post_stratify,ref = paste0(c(0,1),collapse="."))]
if(IV==TRUE){
eventdata <- construct_event_variables_iv(eventdata,saturate,IV,response)
}
return(eventdata)
}
construct_event_variables_iv <- function(eventdata,saturate=FALSE,IV=FALSE,response=NULL){
eventdata[,Z:=instrument_group[event_time != base_time],by=.(unitfe)]
eventdata[,R:=get(response)[event_time != base_time],by=.(unitfe)]
eventdata[,response_event_time_stratify := interaction(event_time,stratify, drop = TRUE)]
eventdata[,instrument_event_time_stratify := interaction(event_time,stratify, drop = TRUE)]
#Omitting base year for all levels of --stratify--, for response interaction
eventdata[R == 0 ,response_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
eventdata[event_time==base_time,response_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
eventdata[,response_event_time_stratify:=relevel(response_event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
#Omitting base year for all levels of --stratify--, for instrument interaction
eventdata[Z == 0 ,instrument_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
eventdata[event_time==base_time,instrument_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
eventdata[,instrument_event_time_stratify:=relevel(instrument_event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
#Defining response-event-time interactions, setting to omitted value if response == 0:
eventdata[,treated_response_event_time_stratify := treated_event_time_stratify]
eventdata[R==0,treated_response_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
#Defining pooled response interactions, setting to omitted value if response == 0:
eventdata[,treated_response_post_stratify := treated_post_stratify]
eventdata[R==0,treated_response_post_stratify := paste0(c(0,1),collapse=".")]
eventdata[,treated_response_pre_stratify := treated_pre_stratify]
eventdata[R==0,treated_response_pre_stratify := 1]
#Defining instrument-event-time interactions, setting to omitted value if instrument == 0:
eventdata[,treated_instrument_event_time_stratify := treated_event_time_stratify]
eventdata[Z==0,treated_instrument_event_time_stratify := paste0(c(max(eventdata$base_time),1),collapse=".")]
#Defining pooled instrument interactions, setting to omitted value if instrument == 0:
eventdata[,treated_instrument_post_stratify := treated_post_stratify]
eventdata[Z==0,treated_instrument_post_stratify := paste0(c(0,1),collapse=".")]
eventdata[,treated_instrument_pre_stratify := treated_pre_stratify]
eventdata[Z==0,treated_instrument_pre_stratify := 1]
if(saturate==TRUE) {
eventdata[,event_time_stratify:=interaction(event_time_stratify,balancevars, drop=TRUE)]
eventdata[,instrument_event_time_stratify:=interaction(instrument_event_time_stratify,balancevars, drop=TRUE)]
eventdata[,treated_event_time_stratify:=interaction(treated_event_time_stratify,balancevars, drop=TRUE)]
eventdata[,treated_pre_stratify:=interaction(treated_pre_stratify,balancevars, drop=TRUE)]
eventdata[,treated_post_stratify:=interaction(treated_post_stratify,balancevars, drop=TRUE)]
# if(fullsaturate==TRUE){
# eventdata[,treated_instrument_event_time_stratify:=interaction(treated_instrument_event_time_stratify,balancevars, drop=TRUE)]
# eventdata[,treated_instrument_event_time_stratify:=relevel(treated_instrument_event_time_stratify,ref = paste0(c(max(eventdata$base_time),1,0),collapse="."))]
# eventdata[event_time==base_time | Z == 0 | treated==0,treated_instrument_event_time_stratify:=levels(treated_instrument_event_time_stratify)[1]]
# eventdata[,treated_instrument_post_stratify:=interaction(treated_instrument_post_stratify,balancevars, drop=TRUE)]
# eventdata[,treated_instrument_pre_stratify:=interaction(treated_instrument_pre_stratify,balancevars, drop=TRUE)]
# }
}
return(eventdata)
}
process_stratify <- function(eventdata){
if(stratify_balance_val != "mean"){
eventdata[,treated_base := treated == 1 & stratify == stratify_balance_val]
stratvals<-unique(eventdata$stratify)
for(strat in stratvals){
if(strat != stratify_balance_val){
stratbalmodel <- feols(treated_base ~ 1 | interaction(cohort,event_time,time_pair,balancevars, drop = TRUE),
data = eventdata[(treated == 1 & stratify == stratify_balance_val) |
(treated == 1 & stratify == strat),], lean = TRUE, mem.clean=TRUE)
eventdata[, eval(paste0("pval_1",strat)) := predict(stratbalmodel,
eventdata)]
eventdata[treated == 1 & stratify == strat, pweight_stratbal := get(paste0("pval_1",strat))/(1-get(paste0("pval_1",strat)))]
}
else    eventdata[treated == 1 & stratify == strat, pweight_stratbal := 1]
stratbalmodel <- feols(treated_base ~ 1 | interaction(cohort,event_time,time_pair,balancevars, drop = TRUE),
data = eventdata[(treated == 1 & stratify == stratify_balance_val) |
(treated == 0 & stratify == strat),], lean = TRUE, mem.clean=TRUE)
eventdata[, eval(paste0("pval_0",strat)) := predict(stratbalmodel,
eventdata)]
eventdata[treated == 0 & stratify == strat, pweight_stratbal := get(paste0("pval_0",strat))/(1-get(paste0("pval_0",strat)))]
}
checkvars <- names(eventdata)[grepl("pval_",names(eventdata))]
for(var in checkvars){
eventdata[get(var) == 1 | get(var) == 0 | is.na(get(var)),  pweight_stratbal := NA ]
}
}
if(stratify_balance_val == "mean"){
stratvals<-unique(eventdata$stratify)
for(strat in stratvals){
eventdata[,treated_base := treated == 1 & stratify == strat]
stratbalmodel <- feols(treated_base ~ 1 | interaction(cohort,event_time,time_pair,balancevars, drop = TRUE),
data = eventdata, lean = TRUE, mem.clean=TRUE)
eventdata[, eval(paste0("pval_1",strat)) := predict(stratbalmodel,
eventdata)]
eventdata[treated == 1 & stratify == strat, pweight_stratbal :=1/(get(paste0("pval_1",strat)))]
eventdata[,treated_base := treated == 0 & stratify == strat]
stratbalmodel <- feols(treated_base ~ 1 | interaction(cohort,event_time,time_pair,balancevars, drop = TRUE),
data = eventdata, lean = TRUE, mem.clean=TRUE)
eventdata[, eval(paste0("pval_0",strat)) := predict(stratbalmodel,
eventdata)]
eventdata[treated == 0 & stratify == strat, pweight_stratbal := 1/(get(paste0("pval_0",strat)))]
}
#Need to rebalance everyone to look like distribution of TREATED guys:
stratbalmodel <- feols(treated ~ 1 | interaction(cohort,event_time,time_pair,balancevars, drop = TRUE),
data = eventdata, lean = TRUE, mem.clean=TRUE)
eventdata[, pval_treat := predict(stratbalmodel,
eventdata)]
eventdata[,pweight_stratbal:=pweight_stratbal*pval_treat]
checkvars <- names(eventdata)[grepl("pval_",names(eventdata))]
for(var in checkvars){
eventdata[get(var) == 1 | get(var) == 0 | is.na(get(var)),  pweight_stratbal := NA ]
}
}
return(eventdata)
}
process_iv <- function(eventdata, instrument, instrument_exposure, covs_instrument_base_balance, saturate){
eventdata[,instrument_group_now:=max(get(instrument) == 1 & as.numeric(as.character(time_pair)) == as.numeric(as.character(event_time))),by=.(id,cohort,time_pair)]
eventdata[,instrument_group_base:=max(get(instrument) == 1 & as.numeric(as.character(base_time)) == as.numeric(as.character(event_time))),by=.(id,cohort,time_pair)]
if(instrument_exposure=="full") eventdata <- eventdata[instrument_group_now == instrument_group_base,]
if(instrument_exposure=="partial") eventdata <- eventdata[(instrument_group_now == 0 & instrument_group_base == 0) | (instrument_group_base == 0 & instrument_group_now == 1),]
if(instrument_exposure=="all") {
eventdata <- eventdata[!is.na(instrument_group_now) & !is.na(instrument_group_base),]
eventdata[,instrument_group_now := pmax(instrument_group_now,instrument_group_base)]
}
if(instrument_exposure=="base") {
eventdata <- eventdata[!is.na(instrument_group_base),]
eventdata[,instrument_group_now := instrument_group_base]
}
#After restricting on instrument status, need to re-impose balance:
eventdata[,obscount:=1]
eventdata[,obscount:=sum(ifelse(event_time==base_time,0,obscount)),by=.(id,cohort)]
if(balanced_panel==TRUE) {
eventdata <- eventdata[obscount==numperiods-1,]
}
eventdata[,instrument_group:=instrument_group_now]
eventdata[,instrument_group_now:=NULL]
eventdata[,instrument_group_base:=NULL]
if(length(unique(eventdata$instrument_group)) == 1)
stop("No variation in instrument left in the panel. Maybe because you're trying to impose panel balance?")
if(!is.na(covs_instrument_base_balance)) eventdata[,instrument_balancevars:=interaction(eventdata[,covs_instrument_base_balance,with=FALSE], drop=TRUE)]
else eventdata[,instrument_balancevars:=factor(1,levels=c(1,"OMIT"))]
eventdata[,ivgroup:=interaction(treated,instrument_group)]
ivlevels<-unique(eventdata$ivgroup)
for(strat in ivlevels){
eventdata[,treated_base := ivgroup == strat]
stratbalmodel <- feols(treated_base ~ 1 | interaction(cohort,event_time,time_pair,instrument_balancevars, drop = TRUE),
data = eventdata, lean = TRUE, mem.clean=TRUE,
weights = eventdata$pweight)
eventdata[, eval(paste0("pval_",strat)) := predict(stratbalmodel,
eventdata)]
eventdata[ivgroup == strat, pweight_new :=pweight/(get(paste0("pval_",strat)))]
}
#Need to rebalance everyone to look like distribution of TREATED guys:
stratbalmodel <- feols(treated ~ 1 | interaction(cohort,event_time,time_pair,instrument_balancevars, drop = TRUE),
data = eventdata, lean = TRUE, mem.clean=TRUE,
weights = eventdata$pweight)
eventdata[, pval_treat := predict(stratbalmodel,
eventdata)]
eventdata[,pweight_new:=pweight_new*pval_treat]
eventdata[,pval_treat:=NULL]
eventdata[,pweight:=pweight_new]
eventdata[,pweight_new:=NULL]
checkvars <- names(eventdata)[grepl("pval_",names(eventdata))]
for(var in checkvars){
eventdata[get(var) == 1 | get(var) == 0 | is.na(get(var)),  pweight := NA ]
eventdata[,eval(var):=NULL]
}
eventdata<-eventdata[!is.na(pweight),]
if(length(unique(eventdata$instrument_group)) == 1) stop("No variation in instrument left in the panel after imposing common support on observables
across instrument X treatment cells.")
return(eventdata)
}
rm(list = ls())
gc()
library(profvis)
setwd("~/GitHub/EventStudyCode")
source("sim_did.R")
# simulation ---------------------------------------------------------------------
#test with did
source("source/setup.R")
source("source/preprocess.R")
source("source/estimation.R")
source("source/report.R")
simdt <- sim_did(100000, 10, cov = "int", hetero = "dynamic", balanced = FALSE)
dt <- simdt$dt
# event code ---------------------------------------------------------------------
profvis({
event_panel <- copy(dt) #copying so that the original does not change
min_time <- -Inf
max_time <- Inf
y_name <- "y"
t_name <- "time"
unit_name <- "unit"
cohort_name <- "G"
balance_covariate <- "x"
event_panel <- event_panel %>% create_event_data(timevar = t_name, unitvar = unit_name,
cohortvar = cohort_name,
covariate_base_balance = balance_covariate,
balanced_panel = TRUE,
never_treat_action = "both")
event_panel <- construct_event_variables(event_panel)
event_est <- get_result_dynamic(event_panel, variable = y_name, trends = FALSE)
})
View(event_est)
profvis({
event_est <- get_result_dynamic(event_panel, variable = y_name, trends = FALSE)
})
gc()
profvis({
event_est <- get_result_dynamic(event_panel, variable = y_name, trends = FALSE)
})
event_ATTs_dynamic<-function(eventdata,
outcomes,#vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL){
eventdata[,event_time_stratify:=as.factor(as.character(event_time_stratify))]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
eventdata[,treated_event_time_stratify:=as.factor(as.character(treated_event_time_stratify))]
eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
if(keep_trends == TRUE){
results<-feols(as.formula(paste0("c(",
paste0(outcomes,collapse=",") , ") ~ event_time_stratify + treated_event_time_stratify | unitfe"
)),
data = eventdata,
weights= eventdata[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
}
else{
results<-feols(as.formula(paste0("c(",
paste0(outcomes,collapse=",") , ") ~ treated_event_time_stratify | event_time_stratify + unitfe"
)),
data = eventdata,
weights= eventdata[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
}
return(list(dynamic = results))
}
profvis({
event_est <- get_result_dynamic(event_panel, variable = y_name, trends = FALSE)
})
event_ATTs_dynamic<-function(eventdata,
outcomes,#vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL){
eventdata[,event_time_stratify:=as.factor(as.character(event_time_stratify))]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
eventdata[,treated_event_time_stratify:=as.factor(as.character(treated_event_time_stratify))]
eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
if(keep_trends == TRUE){
results<-feols(as.formula(paste0("c(",
paste0(outcomes,collapse=",") , ") ~ event_time_stratify + treated_event_time_stratify | unitfe"
)),
data = eventdata,
weights= eventdata[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
}
else{
results<-feols(as.formula(paste0("c(",
paste0(outcomes,collapse=",") , ") ~ treated_event_time_stratify | event_time_stratify + unitfe"
)),
data = eventdata,
weights= eventdata[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = FALSE)
}
return(list(dynamic = results))
}
profvis({
event_est <- get_result_dynamic(event_panel, variable = y_name, trends = FALSE)
})
event_ATTs_dynamic<-function(eventdata,
outcomes,#vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL){
eventdata[,event_time_stratify:=as.factor(as.character(event_time_stratify))]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
eventdata[,treated_event_time_stratify:=as.factor(as.character(treated_event_time_stratify))]
eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
if(keep_trends == TRUE){
results<-feols(as.formula(paste0("c(",
paste0(outcomes,collapse=",") , ") ~ event_time_stratify + treated_event_time_stratify | unitfe"
)),
data = eventdata,
weights= eventdata[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
}
else{
results<-feols(as.formula(paste0("c(",
paste0(outcomes,collapse=",") , ") ~ treated_event_time_stratify | event_time_stratify + unitfe"
)),
data = eventdata,
weights= eventdata[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = FALSE)
}
return(list(dynamic = results))
}
profvis({
event_est <- get_result_dynamic(event_panel, variable = y_name, trends = FALSE)
})
get_result_dynamic2 <-function(eventdata_panel, variable, clustervar = "id", weights = "pweight"){
call <- paste0("c(", paste0(variable,collapse=","), ") ~ treated_event_time_stratify | event_time_stratify + unitfe")
results<-feols(as.formula(call),
data = eventdata_panel,
weights= eventdata_panel[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
table <- data.table()
for(result in results){
dt<-data.table(outcome = (function(x) x[x != "c"])(as.character(result$fml[[2]])),
variable = row.names(result$coeftable), result$coeftable,obs=result$nobs)
table<-rbind(dt,table)
}
table[, event_time := as.integer(str_remove_all(str_extract(variable, "y(.*?)\\."), "y|\\."))]
setnames(table, c("Estimate", "Std. Error"), c("att", "se"))
setorder(table, outcome, event_time)
table <- table[,.(outcome, event_time, att, se, obs)]
return(table)
}
profvis({
event_est <- get_result_dynamic2(event_panel, variable = y_name, trends = FALSE)
})
profvis({
event_est <- get_result_dynamic2(event_panel, variable = y_name)
})
head(event_panel)
View(event_est)
event_est2 <- get_result_dynamic2(event_panel, variable = y_name)
source("source/estimation.R")
source("source/report.R")
profvis({
event_est <- get_result_dynamic2(event_panel, variable = y_name)
})
Q
source("source/estimation.R")
profvis({
event_est <- get_result_dynamic2(event_panel, variable = y_name)
})
get_result_dynamic2 <-function(eventdata_panel, variable, clustervar = "id", weights = "pweight"){
eventdata_panel[,event_time_stratify:=as.factor(as.character(event_time_stratify))]
eventdata_panel[,event_time_stratify:=relevel(event_time_stratify,ref = paste0(c(max(eventdata$base_time),1),collapse="."))]
eventdata_panel[,treated_event_time_stratify:=as.factor(as.character(treated_event_time_stratify))]
eventdata_panel[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = paste0(c(max(eventdata_panel$base_time),1),collapse="."))]
call <- paste0("c(", paste0(variable,collapse=","), ") ~ treated_event_time_stratify | event_time_stratify + unitfe")
results<-feols(as.formula(call),
data = eventdata_panel,
weights= eventdata_panel[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
table <- data.table()
for(result in results){
dt<-data.table(outcome = (function(x) x[x != "c"])(as.character(result$fml[[2]])),
variable = row.names(result$coeftable), result$coeftable,obs=result$nobs)
table<-rbind(dt,table)
}
table[, event_time := as.integer(str_remove_all(str_extract(variable, "y(.*?)\\."), "y|\\."))]
setnames(table, c("Estimate", "Std. Error"), c("att", "se"))
setorder(table, outcome, event_time)
table <- table[,.(outcome, event_time, att, se, obs)]
return(table)
}
profvis({
event_est <- get_result_dynamic2(event_panel, variable = y_name)
})
get_result_dynamic2 <-function(eventdata_panel, variable, clustervar = "id", weights = "pweight"){
base_ref <- paste0(c(max(eventdata_panel$base_time),1),collapse=".")
eventdata_panel[,event_time_stratify:=as.factor(as.character(event_time_stratify))]
eventdata_panel[,event_time_stratify:=relevel(event_time_stratify,ref = base_ref)]
eventdata_panel[,treated_event_time_stratify:=as.factor(as.character(treated_event_time_stratify))]
eventdata_panel[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_ref)]
call <- paste0("c(", paste0(variable,collapse=","), ") ~ treated_event_time_stratify | event_time_stratify + unitfe")
results<-feols(as.formula(call),
data = eventdata_panel,
weights= eventdata_panel[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
table <- data.table()
for(result in results){
dt<-data.table(outcome = (function(x) x[x != "c"])(as.character(result$fml[[2]])),
variable = row.names(result$coeftable), result$coeftable,obs=result$nobs)
table<-rbind(dt,table)
}
table[, event_time := as.integer(str_remove_all(str_extract(variable, "y(.*?)\\."), "y|\\."))]
setnames(table, c("Estimate", "Std. Error"), c("att", "se"))
setorder(table, outcome, event_time)
table <- table[,.(outcome, event_time, att, se, obs)]
return(table)
}
profvis({
event_est <- get_result_dynamic2(event_panel, variable = y_name)
})
get_result_dynamic2 <-function(eventdata_panel, variable, clustervar = "id", weights = "pweight"){
base_ref <- paste0(c(max(eventdata_panel$base_time),1),collapse=".")
eventdata_panel[,event_time_stratify:=as.factor(as.character(event_time_stratify))]
eventdata_panel[,event_time_stratify:=relevel(event_time_stratify,ref = base_ref)]
eventdata_panel[,treated_event_time_stratify:=as.factor(as.character(treated_event_time_stratify))]
eventdata_panel[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_ref)]
call <- paste0("c(", paste0(variable,collapse=","), ") ~ treated_event_time_stratify | event_time_stratify + unitfe")
results<-feols(as.formula(call),
data = eventdata_panel,
weights= eventdata_panel[,get(weights)],
#split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
table <- data.table()
for(result in results){
dt<-data.table(outcome = (function(x) x[x != "c"])(as.character(result$fml[[2]])),
variable = row.names(result$coeftable), result$coeftable,obs=result$nobs)
table<-rbind(dt,table)
}
table[, event_time := as.integer(str_remove_all(str_extract(variable, "y(.*?)\\."), "y|\\."))]
setnames(table, c("Estimate", "Std. Error"), c("att", "se"))
setorder(table, outcome, event_time)
table <- table[,.(outcome, event_time, att, se, obs)]
return(table)
}
event_est <- get_result_dynamic2(event_panel, variable = y_name)
head(event_panel)
eventdata_panel <- event_panel
base_ref <- paste0(c(max(eventdata_panel$base_time),1),collapse=".")
eventdata_panel[,event_time_stratify:=as.factor(as.character(event_time_stratify))]
eventdata_panel[,event_time_stratify:=relevel(event_time_stratify,ref = base_ref)]
eventdata_panel[,treated_event_time_stratify:=as.factor(as.character(treated_event_time_stratify))]
eventdata_panel[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_ref)]
variable <- "y"
call <- paste0("c(", paste0(variable,collapse=","), ") ~ treated_event_time_stratify | event_time_stratify + unitfe")
results<-feols(as.formula(call),
data = eventdata_panel,
weights= eventdata_panel[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
clustervar = "id"
weights = "pweight"
results<-feols(as.formula(call),
data = eventdata_panel,
weights= eventdata_panel[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
results<-feols(as.formula(call),
data = eventdata_panel,
weights= eventdata_panel[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
View(results)
source("source/estimation.R")
profvis({
event_est <- get_result_dynamic(event_panel, variable = y_name)
})
results<-feols(as.formula(paste0("c(",
paste0(outcomes,collapse=",") , ") ~ treated_event_time_stratify | event_time_stratify + unitfe"
)),
data = eventdata,
weights= eventdata[,get(weights)],
split = "time_pair",
cluster=clustervar, lean = TRUE, mem.clean = TRUE)
