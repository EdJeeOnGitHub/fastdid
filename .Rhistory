"~ treated_pre_stratify + treated_post_stratify | event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results_pooled <-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
return(list(pooled = results_pooled))
}
event_ATTs_covariates<-function(eventdata,
outcomes=NULL,#vector of variable names
covariates=NULL, #vector of covariates on which to check balance
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
if(is.null(covariates)){
stop("covariates is null")
}
#eventdata$stratify <- factor(eventdata$stratify, levels = c(levels(eventdata$stratify), "empty"))
eventdata[,int_event_time_stratify:=interaction(event_time,stratify)]
call <- paste0("c(", paste0(covariates,collapse=",") , ") ~ int_event_time_stratify + int_event_time_stratify:treated- 1" )
estimate_data <- eventdata[as.numeric(as.character(event_time)) == as.numeric(as.character(time_pair)) | as.numeric(as.character(time_pair)) == 0,]
results_covariates <- feols(as.formula(call),
data = estimate_data,
weights= estimate_data[,get(weights)],
se=se,
cluster=clustervar, lean = lean, ssc=ssc, mem.clean = mem.clean)
return(list(covariates = results_covariates))
}
event_ATTs<-function(eventdata,
outcomes,#vector of variable names
covariates=NULL, #vector of covariates on which to check balance
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL){
#These regressions should work identically if the fixed effects (after the "|") were replaced with:
# interaction(time_pair,id,cohort)
if(se != "cluster") clustervar<-NULL
if(is.null(ssc)) ssc<-ssc()
construct_event_variables(eventdata)
eventdata$stratify <- factor(eventdata$stratify, levels = c(levels(eventdata$stratify), "empty"))
results_dynamic <- event_ATTs_dynamic(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
results_pooled <- event_ATTspooled(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
results_means <- event_ATTs_means(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
results_covariates <- event_ATTs_covariates(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
return(list(pooled = results_pooled,
dynamic = results,
means = results_means,
covariates = results_covariates))
}
# get result -------------------
get_result_cohort_event_time<-function(eventdata_panel,variable,trends=TRUE, mem.clean = TRUE){
validate_eventdata(eventdata_panel, variable)
results<-event_ATTs_cohort_event_time(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
dt <- parse_event_ATTs(results, variable, "cohort_event_time")
return(dt)
}
cohort_event_time
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
source("source/estimation.R")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
source("source/estimation.R")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
variable
traceback()
source("source/estimation.R")
time_period <- 10
sample_size <- 1000
simdt <- sim_did(sample_size, time_period, cov = "int", hetero = "dynamic", balanced = FALSE, second_outcome = FALSE, seed = 1)
dt <- simdt$dt
att <- simdt$att
event_panel <- copy(dt) #copying so that the original does not change
min_time <- -Inf
max_time <- Inf
y_name <- c("y")
t_name <- "time"
unit_name <- "unit"
cohort_name <- "G"
stratify_name <- "s"
balance_name <- "x"
event_panel <- event_panel %>% create_event_data(timevar = t_name, unitvar = unit_name,
cohortvar = cohort_name,
covariate_base_balance = balance_name,
covariate_base_stratify = stratify_name,
balanced_panel = TRUE,
never_treat_action = "both")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
traceback()
y_name
source("source/estimation.R")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
eventdata_panel <- event_panel
variable <- "y"
validate_eventdata(eventdata_panel, variable)
results<-event_ATTs_cohort_event_time(eventdata_panel,outcomes = c(variable), keep_trends = trends, mem.clean = mem.clean)
eventdata_panel
c(variable)
trends
trends <- TRUE
mem.clean <- TRUE
results<-event_ATTs_cohort_event_time(eventdata_panel,outcomes = c(variable), keep_trends = trends, mem.clean = mem.clean)
event_ATTs_cohort_event_time(eventdata_panel, outcomes = c(variable), keep_trends = trends, mem.clean = mem.clean)
traceback()
eventdata <- eventdata_panel
outcomes <= "y"
eventdata[,cohort_event_time_event_time_stratify:= finteraction(cohort,event_time_fact,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := qF(str_c(cohort,base_time,stratify,sep="."))]
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
outcomes <- "y"
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
keep_trends <- FALSE
clustervar="id"
weights="pweight"
keep_trends=TRUE
se="cluster"
lean=TRUE
ssc=NULL
mem.clean = TRUE
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
results<-event_ATTs_dynamic(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
results <- event_ATTs_cohort_event_time(eventdata_panel,outcomes = c(variable), keep_trends = trends, mem.clean = mem.clean)
results<-event_ATTs_cohort_event_time(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
return(list(cohort_event_time = results))
}
results<-event_ATTs_cohort_event_time(eventdata_panel,outcomes = c(variable),keep_trends = trends, mem.clean = mem.clean)
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
#base_event_stratify <- paste0(c(base_time,1),collapse=".")
eventdata[,cohort_event_time_event_time_stratify:= finteraction(cohort,event_time_fact,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
#Omitting base year for all levels of --stratify--:
#eventdata[event_time==base_time, event_time_stratify := base_event_stratify]
#eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := qF(str_c(cohort,base_time,stratify,sep="."))]
#eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
return(list(cohort_event_time = results))
}
rm(list = ls())
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(testthat)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/preprocess.R")
source("source/estimation.R")
source("source/report.R")
source("source/test.R")
# simulation ---------------------------------------------------------------------
time_period <- 10
sample_size <- 1000
simdt <- sim_did(sample_size, time_period, cov = "int", hetero = "dynamic", balanced = FALSE, second_outcome = FALSE, seed = 1)
dt <- simdt$dt
att <- simdt$att
event_panel <- copy(dt) #copying so that the original does not change
min_time <- -Inf
max_time <- Inf
y_name <- c("y")
t_name <- "time"
unit_name <- "unit"
cohort_name <- "G"
stratify_name <- "s"
balance_name <- "x"
event_panel <- event_panel %>% create_event_data(timevar = t_name, unitvar = unit_name,
cohortvar = cohort_name,
covariate_base_balance = balance_name,
covariate_base_stratify = stratify_name,
balanced_panel = TRUE,
never_treat_action = "both")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
View(ce)
head(event_panel)
source("source/estimation.R")
time_period <- 10
sample_size <- 1000
simdt <- sim_did(sample_size, time_period, cov = "int", hetero = "dynamic", balanced = FALSE, second_outcome = FALSE, seed = 1)
dt <- simdt$dt
att <- simdt$att
event_panel <- copy(dt) #copying so that the original does not change
min_time <- -Inf
max_time <- Inf
y_name <- c("y")
t_name <- "time"
unit_name <- "unit"
cohort_name <- "G"
stratify_name <- "s"
balance_name <- "x"
event_panel <- event_panel %>% create_event_data(timevar = t_name, unitvar = unit_name,
cohortvar = cohort_name,
covariate_base_balance = balance_name,
covariate_base_stratify = stratify_name,
balanced_panel = TRUE,
never_treat_action = "both")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
View(ce)
View(ce)
source("source/estimation.R")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
View(ce)
source("source/estimation.R")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
eventdata[,unitfe := finteraction(cohort,time_pair,treated,id)]
eventdata[,cohort_event_time_event_time_stratify:= finteraction(event_time_fact,cohort,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
#Omitting base year for all levels of --stratify--:
#eventdata[event_time==base_time, event_time_stratify := base_event_stratify]
#eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := qF(str_c(base_time,cohort,stratify,sep="."))]
#eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
split = "cohort",
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
results
results$`sample.var: cohort; sample: 2`
result <- results$`sample.var: cohort; sample: 2`
result
result$coefficients
coef <- result$coefficients
coef
?relevel
head(event_panel)
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
#base_event_stratify <- paste0(c(base_time,1),collapse=".")
eventdata[,unitfe := finteraction(cohort,time_pair,treated,id)]
eventdata[,cohort_event_time_event_time_stratify:= finteraction(event_time_fact,cohort,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
#Omitting base year for all levels of --stratify--:
eventdata[event_time==base_time, event_time_stratify :=  qF(str_c(base_time,cohort,stratify,sep="."))]
#eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := qF(str_c(base_time,cohort,stratify,sep="."))]
#eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
#split = "cohort",
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
browser()
return(list(cohort_event_time = results))
}
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
results$coefficients
cc <- results$coefficients
View(cc)
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
base_event_stratify <- paste0(c(base_time,1),collapse=".")
eventdata[,unitfe := finteraction(cohort,time_pair,treated,id)]
eventdata[,cohort_event_time_event_time_stratify:= finteraction(event_time_fact,cohort,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
#Omitting base year for all levels of --stratify--:
eventdata[event_time==base_time, event_time_stratify := base_event_stratify]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := base_event_stratify]
eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
#split = "cohort",
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
browser()
return(list(cohort_event_time = results))
}
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
base_event_stratify <- paste0(c(eventdata[, max(base_time)],1),collapse=".")
eventdata[,unitfe := finteraction(cohort,time_pair,treated,id)]
eventdata[,cohort_event_time_event_time_stratify:= finteraction(event_time_fact,cohort,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
#Omitting base year for all levels of --stratify--:
eventdata[event_time==base_time, event_time_stratify := base_event_stratify]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := base_event_stratify]
eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
#split = "cohort",
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
browser()
return(list(cohort_event_time = results))
}
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
# estimation ---------------------------------------
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
base_event_stratify <- paste0(c(eventdata[, max(base_time)],1),collapse=".")
eventdata[,unitfe := finteraction(cohort,time_pair,treated,id)]
eventdata[,cohort_event_time_event_time_stratify:= finteraction(event_time_fact,cohort,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
#Omitting base year for all levels of --stratify--:
eventdata[event_time==base_time, event_time_stratify := base_event_stratify]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := base_event_stratify]
eventdata[,treated_event_time_stratify:=relevel(treated_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
#split = "cohort",
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
return(list(cohort_event_time = results))
}
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
View(ce)
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
base_event_stratify <- paste0(c(eventdata[, max(base_time)],1),collapse=".")
eventdata[,unitfe := finteraction(cohort,time_pair,treated,id)]
eventdata[,cohort_event_time_event_time_stratify:= finteraction(event_time_fact,cohort,stratify)]
eventdata[,treated_cohort_event_time_event_time_stratify := cohort_event_time_event_time_stratify]
#Omitting base year for all levels of --stratify--:
eventdata[event_time==base_time, event_time_stratify := base_event_stratify]
eventdata[,event_time_stratify:=relevel(event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_event_time_stratify := base_event_stratify]
eventdata[,treated_cohort_event_time_event_time_stratify:=relevel(treated_cohort_event_time_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_event_time_stratify + treated_cohort_event_time_event_time_stratify |",
"~ treated_cohort_event_time_event_time_stratify | cohort_event_time_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
#split = "cohort",
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
return(list(cohort_event_time = results))
}
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
View(ce)
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(testthat)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/preprocess.R")
source("source/estimation.R")
source("source/report.R")
source("source/test.R")
# simulation ---------------------------------------------------------------------
time_period <- 10
sample_size <- 1000
simdt <- sim_did(sample_size, time_period, cov = "int", hetero = "dynamic", balanced = FALSE, second_outcome = FALSE, seed = 1)
dt <- simdt$dt
att <- simdt$att
event_panel <- copy(dt) #copying so that the original does not change
min_time <- -Inf
max_time <- Inf
y_name <- c("y")
t_name <- "time"
unit_name <- "unit"
cohort_name <- "G"
stratify_name <- "s"
balance_name <- "x"
event_panel <- event_panel %>% create_event_data(timevar = t_name, unitvar = unit_name,
cohortvar = cohort_name,
covariate_base_balance = balance_name,
covariate_base_stratify = stratify_name,
balanced_panel = TRUE,
never_treat_action = "both")
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
View(event_panel)
View(ce)
event_ATTs_cohort_event_time <-function(eventdata,
outcomes, #vector of variable names
clustervar="id",
weights="pweight",
keep_trends=TRUE,
se="cluster",
lean=TRUE,
ssc=NULL,
mem.clean = TRUE){
base_event_stratify <- paste0(c(eventdata[, max(base_time)],1),collapse=".")
eventdata[,cohort_event_time_stratify:= finteraction(event_time_fact,cohort,stratify)]
eventdata[,treated_cohort_event_time_stratify := cohort_event_time_stratify]
#Omitting base year for all levels of --stratify--:
eventdata[event_time==base_time, cohort_event_time_stratify := base_event_stratify]
eventdata[,cohort_event_time_stratify:=relevel(cohort_event_time_stratify,ref = base_event_stratify)]
#Omitting base year for all levels of --stratify--, for treated people
eventdata[event_time==base_time | treated == 0 ,treated_cohort_event_time_stratify := base_event_stratify]
eventdata[,treated_cohort_event_time_stratify:=relevel(treated_cohort_event_time_stratify,ref = base_event_stratify)]
#construct the call
outcomes_call <- paste0("c(", paste0(outcomes,collapse=","), ")")
event_stratify_call <- ifelse(keep_trends, "~ cohort_event_time_stratify + treated_cohort_event_time_stratify |",
"~ treated_cohort_event_time_stratify | cohort_event_time_stratify +")
call <- paste0(outcomes_call, event_stratify_call, " unitfe" )
results<-feols(as.formula(call),
data = eventdata,
weights= eventdata[,get(weights)],
#split = "cohort",
cluster=clustervar, lean = TRUE, mem.clean = mem.clean)
return(list(cohort_event_time = results))
}
ce <- get_result_cohort_event_time(event_panel, variable = y_name, trends = FALSE, mem.clean = FALSE)
View(ce)
