controlcohort[,obscohort:=NULL]
}
#drop someone from the control cohort when they get treated:
controlcohort<-controlcohort[anycohort - cohort > event_time ,]
control_list <- c(control_list, list(controlcohort))
}
rm(controlcohort)
controldata<-rbindlist(control_list)
gc()
controldata[,treated:=0]
controldata<-controldata[event_time >= lower_event_time & event_time <= upper_event_time,]
# covariate to factor -----------------------------------------------------------
#turn covariates to factor
covariates <- c(covariate_base_stratify, covariate_base_balance, covariate_base_support)
covariates <- covariates[covariates %!=% 1]
for(out in covariates){
treatdata[,eval(out) := min(get(out) + 9e9 *(event_time != base_time)), by=.(id,cohort)]
treatdata[get(out) >= 9e9,eval(out) := NA, ]
treatdata[,eval(out) := qF(get(out))]
controldata[,eval(out) := min(get(out) + 9e9 *(event_time != base_time)), by=.(id,cohort)]
controldata[get(out) >= 9e9,eval(out) := NA, ]
controldata[,eval(out) := qF(get(out))]
}
#turn covariates interaction to factors
for(covariate_type in c("stratify", "balancevars", "balancevars_linear_subset", "supportvars")){
cov_vars <- switch(covariate_type,
stratify = ifelse(stratify_by_cohort, c(covariate_base_stratify, "cohort"), covariate_base_stratify),
balancevars = covariate_base_balance,
balancevars_linear_subset = covariate_base_balance_linear_subset,
supportvars = covariate_base_support)
if(is.character(cov_vars)){
treatdata[,(covariate_type) :=  do.call(finteraction, treatdata[, cov_vars, with = FALSE])]
controldata[,(covariate_type) :=  do.call(finteraction, controldata[, cov_vars, with = FALSE])]
} else {
treatdata[,(covariate_type) := factor(1,levels=c(1,"OMIT"))]
controldata[,(covariate_type) := factor(1,levels=c(1,"OMIT"))]
}
}
# checking observation -----------------------------------------------------------------
#If base_time varies across units, reassigning it to a common reference value:
#This is relevant, for instance, with a dataset that moves from annual to bi-annual
treatdata[event_time == base_time,event_time :=max(base_time)]
controldata[event_time == base_time,event_time :=max(base_time)]
base_time <- max(treatdata[, max(base_time)], controldata[, max(base_time)])
treatdata[,base_time := NULL]
controldata[,base_time := NULL]
#check if any unit is observed more then once in the base period
if(!balanced_panel){
#only needed when panel is not already balanced
treatdata[,obsbase:=sum(event_time==base_time),by=.(id,cohort)]
controldata[,obsbase:=sum(event_time==base_time),by=.(id,cohort)]
if(max(treatdata$obsbase)>1) stop("Error: some treated units are observed more than once in the reference period")
if(max(controldata$obsbase)>1) stop("Error: some control units are observed more than once in the reference period")
treatdata <- treatdata[obsbase==1,]
controldata <- controldata[obsbase==1,]
treatdata[,obsbase := NULL]
controldata[,obsbase := NULL]
}
#check base-restrict
if(base_restrict != 1){
controldata[,base_restrict := max(base_restrict * (event_time == base_time), na.rm=TRUE),by=.(id, cohort)]
controldata <- controldata[base_restrict == 1,]
treatdata[,base_restrict := max(base_restrict * (event_time == base_time), na.rm=TRUE),by=.(id, cohort)]
treatdata <- treatdata[base_restrict == 1,]
treatdata[,base_restrict_treated := max(base_restrict_treated * (event_time == base_time), na.rm=TRUE),by=.(id, cohort)]
treatdata <- treatdata[base_restrict_treated == 1,]
controldata <- controldata[base_restrict_treated == 1]
}
#check common support
if(is.character(covariate_base_balance_linear)){
#common support checking is only needed when there is linear regression - interpolation and extrapolation
#o.w. a propensity score within 0,1 means it has common support
treatdata[,temp:=finteraction(balancevars,supportvars,stratify,event_time,cohort)]
controldata[,temp:=finteraction(balancevars,supportvars,stratify,event_time,cohort)]
commonvals<-intersect(unique(treatdata$temp),unique(controldata$temp))
treatdata<-treatdata[temp%in%commonvals,]
controldata<-controldata[temp%in%commonvals,]
treatdata[,temp:=NULL]
controldata[,temp:=NULL]
rm(commonvals)
gc()
}
# stacking for event_time ----------------------------------------------------------------
#if is balanced panel, after knowing its max and min, can be sure it is observed when in the middle
# TODO: make sure the estimates is valid if there are missing value within the min max (FEOLS)
controldata[, `:=`(min_event_time = min(event_time),
max_event_time = max(event_time)), by = .(id, cohort)]
treatdata[, `:=`(min_event_time = min(event_time),
max_event_time = max(event_time)), by = .(id, cohort)]
event_times<-treatdata[,funique(event_time)]
data_list <- list()
for(t in event_times){
pair_treat_data <- treatdata[t >= min_event_time & t <= max_event_time & (event_time == t | event_time == base_time)]
pair_control_data <- controldata[t >= min_event_time & t <= max_event_time & (event_time == t | event_time == base_time)]
pair_treat_data[,time_pair := t]
pair_control_data[,time_pair := t]
data_list<-c(data_list, list(pair_treat_data), list(pair_control_data))
}
eventdata <- rbindlist(data_list,use.names=TRUE)
# estimating ipw ----------------------------------------------------------------------------------
if(is.null(eventdata)) {stop("eventdata is empty!")}
eventdata[,anycohort:=NULL]
rm(treatdata)
rm(controldata)
gc()
eventdata[,post:=event_time >= 0]
#turn the cols into factors
factor_cols <- c("id", "treatgroup", "cohort", "time_pair", "time")
for(col in factor_cols){
eventdata[, (col) := qF(get(col))]
}
#keep a numeric version for later comparisons
eventdata[, event_time_fact := qF(event_time)]
#construct the call
if(!is.character(covariate_base_balance_linear)){
call <- "treated ~ 1 | finteraction(cohort,event_time_fact,time_pair,stratify,balancevars)"
} else {
call <- paste0("treated ~",paste0(covariate_base_balance_linear,collapse="+",
sep="finteraction(cohort,event_time_fact,time_pair,stratify,balancevars_linear_subset,)"),
"| finteraction(cohort,event_time_fact,time_pair,stratify,balancevars)")
}
#estimate ipw
eventdata[,pval:= feols(as.formula(call), data = eventdata, lean = FALSE)$fitted.values]
#only keep propensity score between 0,1 is equivalent to checking common support
eventdata <- eventdata[pval < 1 & pval > 0]
eventdata[,pweight := ifelse(treated == 1, 1, pval/(1-pval))]
eventdata[,pval:=NULL]
#  deal with extensions ----------------------------------------------
if(!is.na(instrument)){
eventdata <- eventdata |> process_iv(instrument, instrument_exposure, covs_instrument_base_balance, saturate)
}
if(!is.na(stratify_balance_val)){
eventdata <- eventdata |> process_stratify(stratify_balance_val)
}
eventdata[,treated:=qF(treated)]
# construct_event_variables --------------------------------------------
if(!is.na(instrument)){
eventdata <- construct_event_variables_iv(eventdata)
}
return(eventdata)
}
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
dt <- generate_sim_dt()[["dt"]]
event_panel <- suppressWarnings(create_event_data(dt, timevar = "time", unitvar = "unit",
cohortvar = "G",
covariate_base_balance = "x",
covariate_base_stratify = "s",
balanced_panel = TRUE,
never_treat_action = "both"))
expect_equal(nrow(event_panel), 5472,
info = "nrow after create_event_panel")
test_create_event_data <- function(){
dt <- generate_sim_dt()[["dt"]]
event_panel <- create_event_data(dt, timevar = "time", unitvar = "unit",
cohortvar = "G",
covariate_base_balance = "x",
covariate_base_stratify = "s",
balanced_panel = TRUE,
never_treat_action = "both")
expect_equal(nrow(event_panel), 5472,
info = "nrow after create_event_panel")
}
test_create_event_data()
test_create_event_data()
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
test_create_event_data()
test_create_event_data
test_create_event_data <- function(){
dt <- generate_sim_dt()[["dt"]]
event_panel <- create_event_data(dt, timevar = "time", unitvar = "unit",
cohortvar = "G",
covariate_base_balance = "x",
covariate_base_stratify = "s",
balanced_panel = TRUE,
never_treat_action = "both")
expect_equal(nrow(event_panel), 5472,
info = "nrow after create_event_panel")
}
test_create_event_data
test_create_event_data()
dt <- generate_sim_dt()[["dt"]]
event_panel <- create_event_data(dt, timevar = "time", unitvar = "unit",
cohortvar = "G",
covariate_base_balance = "x",
covariate_base_stratify = "s",
balanced_panel = TRUE,
never_treat_action = "both")
expect_equal(nrow(event_panel), 5472,
info = "nrow after create_event_panel")
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
dt <- generate_sim_dt()[["dt"]]
event_panel <- create_event_data(dt, timevar = "time", unitvar = "unit",
cohortvar = "G",
covariate_base_balance = "x",
covariate_base_stratify = "s",
balanced_panel = TRUE,
never_treat_action = "both")
expect_equal(nrow(event_panel), 5472,
info = "nrow after create_event_panel")
test_create_event_data <- function(){
dt <- generate_sim_dt()[["dt"]]
event_panel <- create_event_data(dt, timevar = "time", unitvar = "unit",
cohortvar = "G",
covariate_base_balance = "x",
covariate_base_stratify = "s",
balanced_panel = TRUE,
never_treat_action = "both")
expect_equal(nrow(event_panel), 5472,
info = "nrow after create_event_panel")
}
test_create_event_data()
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
test_create_event_data()
?fnunique
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
traceback()
?duplicated
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
test_dynamic(p)
test_cohort_event_time(p)
p <- list()
p$time_period <- 10
p$sample_size <- 100
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
test_dynamic(p)
test_cohort_event_time(p)
rm(list = ls())
gc()
library(profvis)
library(microbenchmark)
library(tinytest)
setwd("~/GitHub/EventStudyCode")
# load event code ---------------------------------------------------------------------
source("sim_did.R")
source("source/setup.R")
source("source/create_event_data.R")
source("source/get_event_result.R")
source("source/test_funcs.R")
# setup --------------------------------------------------------------------------
p <- list()
p$time_period <- 10
p$sample_size <- 1000
p$min_time <- -Inf
p$max_time <- Inf
p$y_name <- c("y")
p$t_name <- "time"
p$unit_name <- "unit"
p$cohort_name <- "G"
p$stratify_name <- "s"
p$balance_name <- "x"
# simulation ---------------------------------------------------------------------
test_create_event_data()
test_dynamic(p)
test_cohort_event_time(p)
